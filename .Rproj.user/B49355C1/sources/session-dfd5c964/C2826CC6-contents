
transcript <- get(load('data/term_level_combined_transcripts/scotus_OT24.rdata'))


oa_analysis <- function(transcript,
                        check_folder_status = T,
                        output_path){
  
  {
    
    color_cells_justice <- function(data) {
      
      colfunc <- colorRampPalette(c("grey50", "olivedrab"))(9)
      
      colored_data <- data.frame()
      
      for (i in 1:nrow(data)) {
        
        row_data <- data[i, ] %>%
          relocate(case_name) %>%
          relocate(docket, .after = 'case_name')
        
        values <- unlist(row_data[ , !(names(row_data) %in% c('case_name', 'docket')) ])
        values[is.na(values)] <- 0
        unique_values <- unique(values)
        
        if (length(unique_values) > 1) {
          unique_breaks <- quantile(unique_values, probs = seq(0, 1, length.out = 10), na.rm = TRUE)
        } else {
          unique_breaks <- c(min(values) - 1, max(values) + 1)
        }
        
        color_index <- as.numeric(cut(values, breaks = unique_breaks, labels = 1:9, include.lowest = TRUE))
        values <- cell_spec(values, color = 'white', bold = TRUE, background = colfunc[color_index], font_size = 'large')
        
        temp_combined_df <- data.frame(
          case_name = data[i, ]$case_name,
          docket = data[i, ]$docket,
          t(values),
          check.names = FALSE
        )
        names(temp_combined_df) <- names(row_data)
        
        
        colored_data <- bind_rows(colored_data, temp_combined_df)
      }
      
      return(colored_data)
    }
    
    color_cells_attorney <- function(data, type = NULL) {
      
      
      if (type == 'Participation'){
       
         colfunc <- colorRampPalette(c("grey50", "olivedrab"))(9)
        
        colored_data <- data.frame()
        
        for (i in 1:nrow(data)) {
          
          row_data <- data[i, ]
          
          values <- unlist(row_data[ , !(names(row_data) %in% c('Case', 'Docket', 'Attorney')) ])
          values[is.na(values)] <- 0
          unique_values <- unique(values)
          
          if (length(unique_values) > 1) {
            unique_breaks <- quantile(unique_values, probs = seq(0, 1, length.out = 10), na.rm = TRUE)
          } else {
            unique_breaks <- c(min(values) - 1, max(values) + 1)
          }
          
          color_index <- as.numeric(cut(values, breaks = unique_breaks, labels = 1:9, include.lowest = TRUE))
          values <- cell_spec(values, color = 'white', bold = TRUE, background = colfunc[color_index], font_size = 'large')
          
          temp_combined_df <- data.frame(
            Case = data[i, ]$Case,
            Docket = data[i, ]$Docket,
            Attorney = data[i,]$Attorney,
            t(values),
            check.names = FALSE
          )
          names(temp_combined_df) <- names(row_data)
          
          
          colored_data <- bind_rows(colored_data, temp_combined_df)
        }
        
        return(colored_data)
        
        
      } else {
        colfunc <- colorRampPalette(c("grey50", "olivedrab"))(9)
        
        colored_data <- data.frame()
        
        values <- unlist(data[ , !(names(data) %in% c('Case', 'Docket', 'Attorney')) ])
        unique_values <- unique(values)
        
        if (length(unique_values) > 1) {
          unique_breaks <- quantile(unique_values, probs = seq(0, 1, length.out = 10), na.rm = TRUE)
        } else {
          unique_breaks <- c(min(values) - 1, max(values) + 1)
        }
        
        color_index <- as.numeric(cut(values, breaks = unique_breaks, labels = 1:9, include.lowest = TRUE))
        
        values <- cell_spec(values, color = 'white', bold = TRUE, background = colfunc[color_index], font_size = 'large')
        
        
        if (type == 'Time'){
          temp_combined_df <- data.frame(
            data[names(data) %in% c('Case', 'Docket', 'Attorney')],
            `Time Speaking` = values,
            check.names = FALSE
          )
        } else {
          temp_combined_df <- data.frame(
            data[names(data) %in% c('Case', 'Docket', 'Attorney')],
            `Words` = values,
            check.names = FALSE
          )
          
        }
        
        return(temp_combined_df)
      }
      
      
      
    }
    
  } # Color Cells Function (HTML)
  
  {
    temp_data <- transcript
    unique_sittings <- unique(temp_data$sitting)
    
    if (check_folder_status == T){
      for (sitting in 1:length(unique_sittings)){
        
        if (!dir.exists(file.path(output_path, unique_sittings[sitting]))){
          dir.create(file.path(output_path, unique_sittings[sitting]))
        }
        
        if (!dir.exists(file.path(output_path, 'Combined'))){
          dir.create(file.path(output_path, 'Combined'))
        }
        
      } # Check if Folder Already Created -- If Not, Add
    } # Create Output Folders (If Necessary)
    
    
    
  } # Recover temp_data using transcript & Create Subfolders (If Needed)
  
  {
    
    for (i in 1:length(unique_sittings)){
      
      temp_justice_words_sitting <- temp_data %>%
        filter(speaker_type == 'Justice') %>%
        filter(sitting == unique_sittings[i]) %>%
        group_by(speaker, docket) %>%
        summarise(total_words = sum(word_count), .groups = 'drop') %>%
        ungroup() %>%
        unique() %>%
        pivot_wider(
          names_from = speaker,
          values_from = total_words) %>%
        left_join(temp_data %>%
                    select(docket, case_name), by = 'docket') %>%
        unique() %>%
        relocate(case_name) %>%
        mutate(across(everything(), ~replace_na(.x, 0)))
      
      
      {
        
        temp_justice_words_sitting_colored <- color_cells_justice(temp_justice_words_sitting)
        
        temp_justice_words_sitting_kable <- temp_justice_words_sitting_colored %>%
          rename('Case' = case_name,
                 'Docket' = docket) %>%
          kbl(longtable = TRUE, escape = FALSE, booktabs = TRUE, align = "c") %>%
          column_spec(1, bold = TRUE, border_right = TRUE) %>%
          row_spec(0,
                   bold = TRUE,
                   color = 'white',
                   background = '#080808',
                   align = 'center',
                   extra_css = "padding: 0; margin: 0;") %>%
          row_spec(seq(1, nrow(temp_justice_words_sitting_colored), 1), align = 'center') %>%
          kable_styling(font_size = 12, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
        
        temp_html_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_justice_words.html'))
        save_kable(temp_justice_words_sitting_kable, temp_html_output_path) # Save HTML Kable
        
        temp_txt_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_justice_words.txt'))
        temp_justice_words_sitting_txt <- as.character(temp_justice_words_sitting_kable)
        writeLines(temp_justice_words_sitting_txt, temp_txt_output_path) # Save HTML Txt
        
        
        } # Kable HTML & TXT HTML
      
      {
        
        temp_csv_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_justice_words.csv'))
        write.csv(temp_justice_words_sitting, file = temp_csv_output_path, row.names = F)
        
      } # CSV Output
      
    } # For Each Sitting -- Produce Individual Values & Figures -- Export HTML (Kable), HTML TXT, CSV, and Figure
    
    
  } # Justice Words by Sitting (KBL HTMl, TXT HTML, and CSV)
  
  message('Compiled Justice-Level Word Counts')
  
  {
    
    for (i in 1:length(unique_sittings)){
      
      temp_justice_sitting_time <- temp_data %>%
        filter(speaker_type == 'Justice') %>%
        filter(sitting == unique_sittings[i]) %>%
        mutate(elapsed = text_stop - text_start) %>%
        group_by(docket, speaker) %>%
        summarise(total_elapsed = sum(elapsed), .groups = 'drop') %>%
        mutate(total_elapsed = round(total_elapsed/60, 2)) %>%
        pivot_wider(
          names_from = speaker,
          values_from = total_elapsed) %>%
        left_join(temp_data %>%
                    select(docket, case_name), by = 'docket') %>%
        unique() %>%
        relocate(case_name) %>%
        mutate(across(everything(), ~replace_na(.x, 0))) # Recover Time in Minutes by Speaker
      
      
      {
        
        temp_justice_time_sitting_colored <- color_cells_justice(temp_justice_sitting_time)
        
        temp_justice_time_sitting_kable <- temp_justice_time_sitting_colored %>%
          rename('Case' = case_name,
                 'Docket' = docket) %>%
          kbl(longtable = TRUE, escape = FALSE, booktabs = TRUE, align = "c") %>%
          column_spec(1, bold = TRUE, border_right = TRUE) %>%
          row_spec(0,
                   bold = TRUE,
                   color = 'white',
                   background = '#080808',
                   align = 'center',
                   extra_css = "padding: 0; margin: 0;") %>%
          row_spec(seq(1, nrow(temp_justice_time_sitting_colored), 1), align = 'center') %>%
          kable_styling(font_size = 12, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
        
        temp_html_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_justice_time.html'))
        save_kable(temp_justice_time_sitting_kable, temp_html_output_path) # Save HTML Kable
        
        temp_txt_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_justice_time.txt'))
        temp_justice_time_sitting_txt <- as.character(temp_justice_time_sitting_kable)
        writeLines(temp_justice_time_sitting_txt, temp_txt_output_path) # Save HTML Txt
        
        
        } # Kable HTML & TXT HTML
      
      {
        
        temp_csv_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_justice_time.csv'))
        write.csv(temp_justice_sitting_time, file = temp_csv_output_path, row.names = F)
        
      } # CSV Output
      
    } # For Each Sitting -- Produce Individual Values & Figures -- Export HTML (Kable), HTML TXT, CSV, and Figure
    
    
  } # Justice Time by Sitting (KBL HTMl, TXT HTML, and CSV)
  
  message('Compiled Justice-Level Speaking Times')
  
  {
    for (i in 1:length(unique_sittings)){
      
      temp_attorney_sitting_words <- temp_data %>%
        filter(speaker_type == 'Attorney') %>%
        filter(sitting == unique_sittings[i]) %>%
        group_by(speaker, docket) %>%
        summarise(total_words = sum(word_count), .groups = 'drop') %>%
        ungroup() %>%
        unique() %>%
        left_join(temp_data %>%
                    select(docket, case_name), by = 'docket', relationship = 'many-to-many') %>%
        unique() %>%
        relocate(case_name) %>%
        mutate(across(everything(), ~replace_na(.x, 0))) %>%
        rename(Case = case_name,
               Attorney = speaker,
               Docket = docket)
      
      
      {
        
        temp_attorney_words_sitting_colored <- color_cells_attorney(data = temp_attorney_sitting_words, type = 'Words')
        
        temp_attorney_words_sitting_kable <- temp_attorney_words_sitting_colored %>%
          kbl(longtable = TRUE, escape = FALSE, booktabs = TRUE, align = "c") %>%
          column_spec(1, bold = TRUE, border_right = TRUE) %>%
          row_spec(0,
                   bold = TRUE,
                   color = 'white',
                   background = '#080808',
                   align = 'center',
                   extra_css = "padding: 0; margin: 0;") %>%
          row_spec(seq(1, nrow(temp_attorney_words_sitting_colored), 1), align = 'center') %>%
          kable_styling(font_size = 12, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
        
        temp_html_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_words.html'))
        save_kable(temp_attorney_words_sitting_kable, temp_html_output_path) # Save HTML Kable
        
        temp_txt_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_words.txt'))
        temp_attorney_time_sitting_txt <- as.character(temp_attorney_words_sitting_kable)
        writeLines(temp_attorney_time_sitting_txt, temp_txt_output_path) # Save HTML Txt
        
        
        } # Kable HTML & TXT HTML
      
      {
        
        temp_csv_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_words.csv'))
        write.csv(temp_attorney_sitting_words, file = temp_csv_output_path, row.names = F)
        
      } # CSV Output
      
    }
    
    
  } # Attorney Words
  
  message('Completed Attorney Word Counts')
  
  {
    for (i in 1:length(unique_sittings)){
      
      temp_attorney_sitting_time <- temp_data %>%
        filter(speaker_type == 'Attorney') %>%
        filter(sitting == unique_sittings[i]) %>%
        mutate(elapsed = text_stop - text_start) %>%
        group_by(docket, speaker) %>%
        summarise(total_elapsed = sum(elapsed), .groups = 'drop') %>%
        mutate(total_elapsed = round(total_elapsed/60, 2)) %>%
        left_join(temp_data %>%
                    select(docket, case_name), by = 'docket', relationship = 'many-to-many') %>%
        unique() %>%
        relocate(case_name) %>%
        mutate(total_elapsed = ifelse(is.na(total_elapsed), 0, total_elapsed)) %>%
        rename(Case = case_name,
               Docket = docket,
               Attorney = speaker,
               `Time Speaking` = total_elapsed)
      
      
      {
        
        temp_attorney_time_sitting_colored <- color_cells_attorney(temp_attorney_sitting_time, type = 'Time')
        
        temp_attorney_time_sitting_kable <- temp_attorney_time_sitting_colored %>%
          kbl(longtable = TRUE, escape = FALSE, booktabs = TRUE, align = "c") %>%
          column_spec(1, bold = TRUE, border_right = TRUE) %>%
          row_spec(0,
                   bold = TRUE,
                   color = 'white',
                   background = '#080808',
                   align = 'center',
                   extra_css = "padding: 0; margin: 0;") %>%
          row_spec(seq(1, nrow(temp_attorney_time_sitting_colored), 1), align = 'center') %>%
          kable_styling(font_size = 12, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
        
        temp_html_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_time.html'))
        save_kable(temp_attorney_time_sitting_kable, temp_html_output_path) # Save HTML Kable
        
        temp_txt_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_time.txt'))
        temp_attorney_time_sitting_txt <- as.character(temp_attorney_time_sitting_kable)
        writeLines(temp_attorney_time_sitting_txt, temp_txt_output_path) # Save HTML Txt
        
        
        } # Kable HTML & TXT HTML
      
      {
        
        temp_csv_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_time.csv'))
        write.csv(temp_attorney_sitting_time, file = temp_csv_output_path, row.names = F)
        
      } # CSV Output
      
    }
    
    
  } # Attorney Time
  
  message('Completed Attorney Speaking Times')
  
  {
    
    for (i in 1:length(unique_sittings)){
      
      temp_sitting_attorney_participation <- temp_data %>%
        filter(sitting == unique_sittings[i]) %>%
        mutate(follows_justice = ifelse(speaker_type == 'Attorney' & lag(speaker_type) == 'Justice', 1, 0),
               preceding_justice = ifelse(follows_justice == 1, lag(speaker), NA)) %>%
        filter(follows_justice == 1) %>%
        select(-c(follows_justice)) %>%
        group_by(docket, speaker, preceding_justice) %>%
        summarise(total_words = sum(word_count), .groups = 'drop') %>%
        pivot_wider(
          names_from = preceding_justice,
          values_from = total_words) %>%
        left_join(temp_data %>%
                    select(docket, case_name), by = 'docket', relationship = 'many-to-many') %>%
        unique() %>%
        relocate(case_name) %>%
        rename(Case = case_name,
               Docket = docket,
               Attorney = speaker)
      
      
      {
        
        temp_sitting_attorney_participation_colored <- color_cells_attorney(temp_sitting_attorney_participation, type = 'Participation')
        
        temp_sitting_attorney_participation_kable <- temp_sitting_attorney_participation_colored %>%
          kbl(longtable = TRUE, escape = FALSE, booktabs = TRUE, align = "c") %>%
          column_spec(1, bold = TRUE, border_right = TRUE) %>%
          row_spec(0,
                   bold = TRUE,
                   color = 'white',
                   background = '#080808',
                   align = 'center',
                   extra_css = "padding: 0; margin: 0;") %>%
          row_spec(seq(1, nrow(temp_sitting_attorney_participation_colored ), 1), align = 'center') %>%
          kable_styling(font_size = 12, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
        
        temp_html_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_participation.html'))
        save_kable(temp_sitting_attorney_participation_kable, temp_html_output_path) # Save HTML Kable
        
        temp_txt_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_participation.txt'))
        temp_sitting_attorney_participation_txt <- as.character(temp_sitting_attorney_participation_kable)
        writeLines(temp_sitting_attorney_participation_txt, temp_txt_output_path) # Save HTML Txt
        
        
        } # Kable HTML & TXT HTML
      
      {
        
        temp_csv_output_path <- file.path(output_path, unique_sittings[i], paste0(unique_sittings[i], '_attorney_participation.csv'))
        write.csv(temp_sitting_attorney_participation, file = temp_csv_output_path, row.names = F)
        
      } # CSV Output
      
      
      
      
    }
    
  } # Attorney Participation (Responses to Justices)
  
  message('Completed Attorney Participation')
  
  {
    
    {
      
      figure_data <- temp_data %>%
        filter(speaker_type == 'Justice') %>%
        select(speaker, word_count) %>%
        group_by(speaker) %>%
        summarise(total_words = sum(word_count), .groups = 'drop') %>%
        mutate(justice = gsub('(Justice |Chief Justice)', '', speaker, ignore.case = T)) %>%
        mutate(image_labels = justice_image_labels[match(justice, names(justice_image_labels))],
               image_labels = gsub(' style\\=.*', '', image_labels),
               image_labels = paste0(image_labels, " width='100' /><br><strong>", justice, "</strong>"))
      
      image_labels <- figure_data$image_labels
      
      justice_words_combined_figure <- ggplot(figure_data, aes(x = factor(justice), y = total_words)) +
        geom_col(aes(fill = total_words), colour = 'gray5') +
        scale_fill_gradient(low = 'gray50', high = 'olivedrab') +
        geom_label(aes(label = scales::comma(total_words)), vjust = 1, size = 4) +
        geom_hline(yintercept = 0) +
        scale_x_discrete(labels = image_labels) +
        theme_classic() +
        labs(x = '',
             y = '',
             fill = '') +
        theme(
          axis.text.x = ggtext::element_markdown(),
          panel.grid = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks.x = element_blank(),
          axis.ticks.y = element_blank(),
          legend.background = element_rect(linewidth = 1, fill = "NA", colour = "black"),
          legend.box.background = element_rect(fill = NA, colour = "black"),
          legend.position = "none",
          legend.title = element_blank(),
          legend.title.align = 0.5,
          legend.text = element_text(size = 12),
          plot.caption = element_text(hjust = 0.5, size = 12),
          plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
          plot.subtitle = element_text(size = 15, hjust = 0.5))
      
      
      temp_combined_figure_output_path <- file.path(output_path, 'Combined', 'justice_words_combined.png')
      ggsave(justice_words_combined_figure, filename = temp_combined_figure_output_path, height = 8, width = 10, bg = 'white')
      
      
    } # Justice Words Combined (Figure)
    
    {
      
      figure_data <- temp_data %>%
        filter(speaker_type == 'Justice') %>%
        mutate(elapsed = text_stop - text_start,
               elapsed = round(elapsed/60, 2)) %>%
        select(speaker, elapsed) %>%
        group_by(speaker) %>%
        summarise(total_time = sum(elapsed), .groups = 'drop') %>%
        mutate(justice = gsub('(Justice |Chief Justice)', '', speaker, ignore.case = T)) %>%
        mutate(image_labels = justice_image_labels[match(justice, names(justice_image_labels))],
               image_labels = gsub(' style\\=.*', '', image_labels),
               image_labels = paste0(image_labels, " width='100' /><br><strong>", justice, "</strong>"))
      
      image_labels <- figure_data$image_labels
      
      justice_time_combined_figure <- ggplot(figure_data, aes(x = factor(justice), y = total_time)) +
        geom_col(aes(fill = total_time), colour = 'gray5') +
        scale_fill_gradient(low = 'gray50', high = 'olivedrab') +
        geom_label(aes(label = scales::comma(total_time)), vjust = 1, size = 4) +
        geom_hline(yintercept = 0) +
        scale_x_discrete(labels = image_labels) +
        theme_classic() +
        labs(x = '',
             y = '',
             fill = '') +
        theme(
          axis.text.x = ggtext::element_markdown(),
          panel.grid = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks.x = element_blank(),
          axis.ticks.y = element_blank(),
          legend.background = element_rect(linewidth = 1, fill = "NA", colour = "black"),
          legend.box.background = element_rect(fill = NA, colour = "black"),
          legend.position = "none",
          legend.title = element_blank(),
          legend.title.align = 0.5,
          legend.text = element_text(size = 12),
          plot.caption = element_text(hjust = 0.5, size = 12),
          plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
          plot.subtitle = element_text(size = 15, hjust = 0.5))
      
      temp_combined_figure_output_path <- file.path(output_path, 'Combined', 'justice_time_combined.png')
      ggsave(justice_time_combined_figure, filename = temp_combined_figure_output_path, height = 8, width = 10, bg = 'white')
      
      
    } # Justice Time Combined (Figure)
    
    
  } # Combined Analyses
  
  message('Completed Justice-Level Combined Analysis')
  
  
}

oa_analysis(transcript = transcript, 
            check_folder_status = T,
            output_path = 'Stat Reviews/OT24_StatReview/oral_arguments/analyses')

