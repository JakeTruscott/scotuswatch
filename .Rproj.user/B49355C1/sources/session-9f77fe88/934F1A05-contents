
decisions_table <- function(input_path,
                            output_path,
                            output_type = 'html',
                            cases_break = 15,
                            master_file = cases_master,
                            remove_existing_files = T){
  
  decisions_file_path = input_path
  
  {
    
    '100 = Wrote Majority
1 = Joined Majority
2 = Wrote Regular Concurrence
3 = Joined Regular Concurrence
4 = Wrote Regular Concurrence & Joined Regular Concurrence
5 = Wrote Concurrence in Judgement
6 = Joined Concurrence in Judgement
7 = Wrote Special Concurrence
8 = Joined Special Concurrence
-1 = Wrote Dissenting Opinion
-2 = Joined Dissenting Opinion
-3 = Wrote Dissent & Joined Dissent'
    
    
  } # Coding Rules
  {
    
    get_vote_color <- function(value){
      if (value == "M*") {
        return('darkolivegreen')
      } else if (value == 'M'){
        return('#99CCFF')
      } else if (value == "RC"){
        return('#66B2FF')
      } else if (value == 'JRC'){
        return('#3399FF')
      } else if (value == 'RC & JRC'){
        return('#3399FF')
      } else if (value == 'CJ'){
        return('#FF9933')
      } else if(value == 'JCJ'){
        return('#FFCC99')
      } else if (value == 'SC'){
        return('#B265FF')
      } else if(value == 'JSC'){
        return('#6600CC')
      } else if (value == 'D'){
        return('#FF3333')
      } else if (value == 'JD'){
        return('#CC0000')
      } else if (value == 'D & JD'){
        return('#990000')
      } else if (value == 'DNP'){
        return('#FFFFFF')
      }
    } #Assign Color to Box by Vote Type
    
  } # Vote Colors
  
  if (grepl('.csv', decisions_file_path)){
    decisions <- read.csv(decisions_file_path, as.is = T)
  } else if (grepl('.rdata', decisions_path, ignore.case = T)){
    decisions <- get(load(decisions_path))
  } else {
    message('Unrecognized File Path: Please Load a CSV or .Rdata File')
    break
  } # Load File -- If Not CSV or Rdata -- STOP
  
  if (remove_existing_files == T){
    invisible(do.call(file.remove, list(list.files(output_path, full.names = TRUE))))
  } # Delete Existing Files
  
  decisions <- decisions %>%
    relocate(Docket, .after = 'Case')
  
  {
    
    decisions <- decisions %>%
      mutate(Date_Argued = anydate(Date_Argued),
             Date_Decided = anydate(Date_Decided)) %>%
      rename('Date Decided' = Date_Decided,
             'Date Argued' = Date_Argued,
             'Lower Court' = Lower_Court) %>%
      mutate(across(Coalition:ncol(.), ~ case_when(
        . == 100 ~ 'M*',
        . == 1 ~ 'M',
        . == 2 ~ 'RC',
        . == 3 ~ 'JRC',
        . == 4 ~ 'RC & JCR',
        . == 5 ~ 'CJ',
        . == 6 ~ 'JCJ',
        . == 7 ~ 'SC',
        . == 8 ~ 'JSC',
        . == -1 ~ 'D',
        . == -2 ~ 'JD',
        . == -3 ~ 'D & JD',
        is.na(.) ~ 'DNP',
        TRUE ~ as.character(.)
      )))
    
    
    decisions$`Date Argued` <- format(decisions$`Date Argued`, "%m/%d/%y")
    decisions$`Date Decided` <- format(decisions$`Date Decided`, "%m/%d/%y")
    
    } # Convert Values to DF
  
  {
    
    decisions_data <- decisions
    matching_columns <- intersect(colnames(decisions_data), names(justice_image_labels))
    
  } # Compile Column Names
  
  {
    
    decisions_data <- decisions_data %>%
      rowwise() %>%
      mutate_at(vars(all_of(matching_columns)),
                ~cell_spec(., background = get_vote_color(.))) %>%
      mutate(across(all_of(matching_columns),
                    ~gsub('border-radius: 4px;',
                          'border-radius: 4px; color: white; ', .))) %>%
      rename_at(.vars = matching_columns, .funs = ~ justice_image_labels[.])
    
  } # Match w/ Justice Images
  
  {
    
    decisions_data <- decisions_data %>%
      ungroup() %>%
      mutate(case_id = row_number())
    
    n_chunks <- ceiling(nrow(decisions_data) / cases_break)
    decision_partitions <- split(decisions_data, ceiling(seq_len(nrow(decisions_data)) / cases_break)) # Split the dataframe into chunks of 10 rows
    
    decisions_original <- decisions %>%
      ungroup() %>%
      mutate(case_id = row_number())
    
    decision_original_partitions <- split(decisions_original, ceiling(seq_len(nrow(decisions_original)) / cases_break)) # Split the dataframe into chunks of 10 rows
    
    
  } # Partition Into Smaller Files
  
  {
    
    for (i in 1:length(decision_partitions)){
      
      temp_decisions <- decision_partitions[[i]]
      min_case_id <- min(temp_decisions$case_id)
      max_case_id <- max(temp_decisions$case_id)
      temp_output_file_name <- file.path(output_path, paste0('decision_info_', i))
      temp_decisions <- temp_decisions %>%
        dplyr::select(-c(case_id))
      
      if (output_type == 'html'){
        
        temp_decisions <- temp_decisions %>%
          select(c('Case', 'Docket', 'Date Argued', 'Date Decided', 'Lower Court', 'Decision', 'Author', 'Coalition')) %>%
          mutate(`Date Decided` = as.Date(`Date Decided`, "%m/%d/%y"),
                 `Date Argued` = as.Date(`Date Argued`, "%m/%d/%y")) %>%
          arrange(`Date Decided`) %>%
          kbl(longtable = TRUE, escape = FALSE, booktabs = TRUE, align = "c") %>%
          column_spec(1, bold = TRUE) %>%
          row_spec(0, bold = TRUE, color = 'white', background = '#080808', align = 'center') %>%
          row_spec(nrow(temp_decisions), extra_css = "border-bottom: 2px solid;") %>%
          kable_styling(font_size = 14, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
        
        
        temp_decisions <- as.character(temp_decisions)
        writeLines(temp_decisions, paste0(temp_output_file_name, '_html.txt'))
        
      } else {
        
        temp_decisions <- temp_decisions %>%
          mutate(`Date Decided` = as.Date(`Date Decided`, "%m/%d/%y"),
                 `Date Argued` = as.Date(`Date Argued`, "%m/%d/%y")) %>%
          dplyr::select(Case, `Date Argued`, `Date Decided`, `Lower Court`, Decision, Author, Coalition, Docket) %>%
          left_join(decisions %>%
                      dplyr::select(-any_of(names(t)), Docket), by = 'Docket') %>%
          arrange(`Date Decided`) %>%
          relocate(Docket, .after = last_col())
        
        write.csv(temp_decisions, file = paste0(temp_output_file_name, '.csv'))
        
      } # If HTML or CSV Output
      
      message('Completed Decisions Info For Cases ', min_case_id, ' to ', max_case_id)
      
    } # For Each Partition of Cases
    
    
  } # Recover Decisions Info for Each In decision_partitions
  
  {
    
    for (i in 1:length(decision_partitions)){
      
      temp_decisions <- decision_partitions[[i]]
      min_case_id <- min(temp_decisions$case_id)
      max_case_id <- max(temp_decisions$case_id)
      temp_vote_matrix_path <- file.path(output_path, paste0('decisions_vote_matrix_', i))
      original_column_names <- names(decisions)
      original_column_names = original_column_names[!original_column_names %in% c('Case', 'Date Argued', 'Date Decided', 'Lower Court', 'Decision', 'Docket', 'Coalition', 'Author')]
      original_column_names <- c(rep('', length = 2), original_column_names)
      temp_decisions <- temp_decisions %>%
        dplyr::select(-c(case_id, Author, `Date Argued`)) %>%
        mutate(`Date Decided` = as.Date(`Date Decided`, "%m/%d/%y")) %>%
        arrange(`Date Decided`) %>%
        relocate(Docket, .after = 'Coalition') %>%
        select(-c('Date Decided', 'Lower Court', 'Decision', 'Coalition'))
      
      {
        
        temp_vote_matrix <- temp_decisions %>%
          kbl(longtable = TRUE, escape = FALSE, booktabs = TRUE, align = "c") %>%
          add_header_above(c(original_column_names)) %>%
          column_spec(1, width = "3cm", bold = TRUE, border_right = TRUE) %>%
          column_spec(2, width = '2cm', bold = TRUE, border_right = TRUE) %>%
          #column_spec(c(2:11), width = "1.25cm", border_right = TRUE) %>%
          column_spec(2:ncol(temp_decisions), width = "1.25cm", border_right = TRUE, extra_css = "vertical-align: middle; font-size: 18px;") %>%
          row_spec(0, bold = TRUE, color = 'white', background = '#080808', align = 'center') %>%
          row_spec(seq(1, nrow(temp_decisions), 1), align = 'center') %>%
          row_spec(nrow(temp_decisions), extra_css = "border-bottom: 2px solid;") %>%
          kable_styling(font_size = 14, bootstrap_options = c("striped", "hover", "responsive")) %>%
          add_footnote(
            c(
              "<span style=\"border-radius: 0px; padding: 1px; background-color: white !important; color: white;\"></span>",
              "<span style=\"border-radius: 0px; padding: 0px; background-color: white !important; color: white;\"></span>",
              
              "<span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: darkolivegreen !important; color: white;\">M*</span> = Majority Author
         <span style=\"margin-left: 10px;\"></span>
         <span style=\"border-radius: 1px; padding: 1px; background-color: #99CCFF !important; color: white;\">M</span> = Joined Majority
         <span style=\"margin-left: 10px;\"></span>
         <span style=\"border-radius: 1px; padding: 1px; background-color: #66B2FF !important; color: white;\">RC</span> = Wrote Concurrence
         <span style=\"margin-left: 10px;\"></span>
         <span style=\"border-radius: 1px; padding: 1px; background-color: #3399FF !important; color: white;\">JRC</span> = Joined Concurrence
         <span style=\"margin-left: 10px;\"></span>
         <span style=\"border-radius: 1px; padding: 1px; background-color: #66B2FF !important; color: white;\">RC & JRC</span> = Wrote & Joined Concurrence",
              
              "<span style=\"border-radius: 3px; padding: 1px; background-color: white !important; color: white;\"> </span>",
              
              "<span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: #FF9933 !important; color: white;\">CJ</span> = Wrote Concurrence In Judgement
         <span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: #FFCC99 !important; color: white;\">JCJ</span> = Joined Concurrence In Judgement
         <span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: #B265FF !important; color: white;\">SC</span> = Wrote Special Concurrence
         <span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: #6600CC !important; color: white;\">JSC</span> = Joined Special Concurrence
         <span style=\"margin-left: 10px;\"></span>",
              
              "<span style=\"border-radius: 3px; padding: 1px; background-color: white !important; color: white;\"> </span>",
              
              "<span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: #FF3333 !important; color: white;\">D</span> = Wrote Dissent
         <span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: #CC0000 !important; color: white;\">JD</span> = Joined Dissent
         <span style=\"margin-left: 10px;\"></span>
        <span style=\"border-radius: 1px; padding: 1px; background-color: #990000 !important; color: white;\">D & JD</span> = Wrote & Joined Dissent
         <span style=\"margin-left: 10px;\"></span>"
              
              
            ),
            notation = "none",
            escape = FALSE  # Add escape parameter to allow HTML formatting
          )
        
        } # Compile Temp Vote Matrix
      
      {
        
        save_kable(temp_vote_matrix, file = paste0(temp_vote_matrix_path, '.html'))
        temp_vote_matrix <- as.character(temp_vote_matrix)
        writeLines(temp_vote_matrix, paste0(temp_vote_matrix_path, '_html.txt'))
        message('Completed Decisions Vote Matrix For Cases ', min_case_id, ' to ', max_case_id)
        
        
      } # Export
      
    }
    
    
    
  } #Compile Vote Matrix Table
  
  {
    
    for (i in 1:length(decision_original_partitions)){
      
      temp_decisions <- decision_original_partitions[[i]]
      temp_information_path <- file.path(output_path, paste0('decisions_information_', i, '.csv'))
      
      temp_decisions <- temp_decisions %>%
        dplyr::select(Case, Docket, 'Date Argued', 'Date Decided', 'Lower Court', Decision, Author, Coalition) %>%
        left_join(master_file %>%
                    select(case, docket) %>%
                    rename(case_short = case,
                           Docket = docket), by = 'Docket') %>%
        left_join(master_file %>%
                    select(docket, consolidated_case_1, consolidated_docket_1, consolidated_lower_court_1) %>%
                    mutate(across(everything(), ~replace_na(.x, ' '))) %>%
                    rename(Docket = docket), by = 'Docket') %>%
        mutate(Case = ifelse(is.na(case_short), Case, case_short)) %>%
        select(-c(case_short)) %>%
        unique() %>%
        mutate(Case = gsub('\\&', 'and', Case),
               Case = gsub('\\,', '', Case)) %>%
        relocate(Case) %>%
        arrange(`Date Decided`) %>%
        mutate(across(everything(), ~replace_na(.x, ' '))) %>%
        mutate(Docket = ifelse(!consolidated_docket_1 %in% c('', ' '), paste0(Docket, ' (', consolidated_docket_1, ')'), Docket), 
               'Lower Court' = ifelse(!`Lower Court` %in% c('', ' '), paste0(`Lower Court`, ' (', consolidated_lower_court_1, ')'), `Lower Court`),
               'Lower Court' = gsub(' \\(\\)', '', `Lower Court`), 
               'Lower Court' = gsub(' \\( \\)', '', `Lower Court`)) %>%
        select(-c(tidyr::starts_with('consolidated_')))
      
      
      {
        
        write.csv(temp_decisions, file = temp_information_path, row.names = FALSE, quote = FALSE)
        
        
        } # Export
      
    }
    
    
    
  } #Compile Decisions Info Table Summary CSV
  
  {
    
    for (i in 1:length(decision_original_partitions)){
      
      temp_decisions <- decision_original_partitions[[i]]
      temp_decision_path <- file.path(output_path, paste0('decisions_vote_matrix_', i, '.csv'))
      
      temp_decisions <- temp_decisions %>%
        dplyr::select(-c('Date Argued', 'Lower Court', 'Decision', 'Coalition')) %>%
        left_join(master_file %>%
                    select(case, docket) %>%
                    rename(case_short = case,
                           Docket = docket), by = 'Docket', relationship = 'many-to-many') %>%
        mutate(Case = ifelse(is.na(case_short), Case, case_short)) %>%
        select(-c(case_short)) %>%
        unique() %>%
        mutate(Case = gsub('\\&', 'and', Case),
               Case = gsub('\\,', '', Case)) %>%
        relocate(Case) %>%
        arrange(`Date Decided`) %>%
        mutate(across(everything(), ~replace_na(.x, ' '))) %>%
        select(-c('Date Decided', case_id))
      
      
      {
        
        write.csv(temp_decisions, file = temp_decision_path, row.names = FALSE, quote = FALSE)
        
        
        } # Export
      
    }
    
    
    
  } #Compile Decisions Vote Matrix Summary CSV
  
  
  
  
} # Decisions Tables (Info + Vote Matrix)